{"version":3,"file":"docs-script.bundle.js","mappings":"mBAgBA,MA2CA,EA3CiB,SAA2CA,EAAOC,GAMlE,IAAIC,EAEAC,EACAC,EAEJ,OAAO,YAAyCC,GAC/C,MAAMC,EAAsBC,IACvBL,GACHM,aAAaN,GAGdA,EAAUO,YAAW,KACpBP,OAAUQ,EAEVP,OAAUO,EACVN,OAAMM,EAENH,EAAQP,EAAGW,MAAMC,KAAMP,MACrBJ,IAcJ,OAXIG,EACHE,EAAmBF,GAEnBD,EAAU,IAAIU,SAAuB,CAACN,EAASO,KAC9CV,EAAMG,EACND,EAAmBF,MAMdD,ICnDHY,EAAY,SAA6BC,GAC9CA,EAAEC,iBAEF,MAAMC,EAAKF,EAAEG,OACPC,EAAsBF,EAAGG,aAAa,uBAE5C,IAAIC,EAAgBF,EAAsBG,SAASH,EAAqB,IAAM,EAE9EE,GAAiB,EAEjBJ,EAAGM,aAAa,sBAAuBF,EAAcG,aAGhDC,EAAyB,EAASX,EAAW,KAC7CY,EAAyB,EAASZ,EAAW,KAEnDa,SAASC,iBAA8B,qBAAqBC,SAASC,GAAQA,EAAIC,iBAAiB,QAASN,KAC3GE,SAASC,iBAA8B,qBAAqBC,SAASC,GAAQA,EAAIC,iBAAiB,QAASL,M","sources":["webpack://@cipscis/debounce/./src/debounce.ts","webpack://@cipscis/debounce/./docs/assets/js/src/docs-script.ts"],"sourcesContent":["/**\n * Create a version of fn that will execute only after\n * no attempt to call it has been made for delay ms.\n * The debounced function returns a Promise that\n * resolves to the value returned by fn.\n *\n * Note that this will uncouple the callback from user\n * input, if used as an event callback. This can cause\n * browsers to attempt to block certain behaviour.\n *\n * This throttling is useful, for example, for waiting until\n * the user has stopped typing before executing a keyup callback.\n *\n * @param {Function} fn - A function to debounce\n * @param {number} delay - The duration to wait before calling the function (ms)\n */\nconst debounce = function<T extends (...args: any) => any> (fn: T, delay: number) {\n\t// Keep track of the timeout, Promise, and the Promise's resolver across multiple calls\n\t// This lets later calls in the same queue know about the previous call,\n\t// to cancel its timeout and use the same promise and resolution\n\n\t// Use ReturnType<typeof setTimeout> for support across ES and NodeJS environments\n\tlet timeout: ReturnType<typeof setTimeout> | undefined;\n\n\tlet promise: Promise<ReturnType<T>> | undefined;\n\tlet res: ((value: ReturnType<T> | PromiseLike<ReturnType<T>>) => void) | undefined;\n\n\treturn function (this: ThisParameterType<T>, ...args: Parameters<T>) {\n\t\tconst scheduleResolution = (resolve: (value: ReturnType<T> | PromiseLike<ReturnType<T>>) => void) => {\n\t\t\tif (timeout) {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t}\n\n\t\t\ttimeout = setTimeout(() => {\n\t\t\t\ttimeout = undefined;\n\n\t\t\t\tpromise = undefined;\n\t\t\t\tres = undefined;\n\n\t\t\t\tresolve(fn.apply(this, args));\n\t\t\t}, delay);\n\t\t};\n\n\t\tif (res) {\n\t\t\tscheduleResolution(res);\n\t\t} else {\n\t\t\tpromise = new Promise<ReturnType<T>>((resolve, reject) => {\n\t\t\t\tres = resolve;\n\t\t\t\tscheduleResolution(res);\n\t\t\t});\n\t\t}\n\n\t\t// There is no type guard for promise on the `if (res)` path,\n\t\t// but if res is not undefined, then neither is promise\n\t\treturn promise as Promise<ReturnType<T>>;\n\t};\n};\n\nexport { debounce };\nexport default debounce;\n","// import debounce from '@cipscis/debounce';\nimport debounce from '../../../../src/debounce.js';\n\nconst increment = function (this: HTMLElement, e: MouseEvent) {\n\te.preventDefault();\n\n\tconst el = e.target as HTMLElement;\n\tconst activateCountString = el.getAttribute('data-activate-count');\n\n\tlet activateCount = activateCountString ? parseInt(activateCountString, 10) : 0;\n\n\tactivateCount += 1;\n\n\tel.setAttribute('data-activate-count', activateCount.toString());\n};\n\nconst debouncedIncrementFast = debounce(increment, 200);\nconst debouncedIncrementSlow = debounce(increment, 1000);\n\ndocument.querySelectorAll<HTMLElement>('.js-debounce-fast').forEach(($el) => $el.addEventListener('click', debouncedIncrementFast));\ndocument.querySelectorAll<HTMLElement>('.js-debounce-slow').forEach(($el) => $el.addEventListener('click', debouncedIncrementSlow));\n"],"names":["fn","delay","timeout","promise","res","args","scheduleResolution","resolve","clearTimeout","setTimeout","undefined","apply","this","Promise","reject","increment","e","preventDefault","el","target","activateCountString","getAttribute","activateCount","parseInt","setAttribute","toString","debouncedIncrementFast","debouncedIncrementSlow","document","querySelectorAll","forEach","$el","addEventListener"],"sourceRoot":""}